// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipv4.proto

package ipv4

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_hpc_kraken_extensions_ipv4_customtypes "github.com/hpc/kraken/extensions/ipv4/customtypes"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IPv4 struct {
	Ip                   *github_com_hpc_kraken_extensions_ipv4_customtypes.IP `protobuf:"bytes,2,opt,name=ip,proto3,customtype=github.com/hpc/kraken/extensions/ipv4/customtypes.IP" json:"ip,omitempty"`
	Subnet               *github_com_hpc_kraken_extensions_ipv4_customtypes.IP `protobuf:"bytes,3,opt,name=subnet,proto3,customtype=github.com/hpc/kraken/extensions/ipv4/customtypes.IP" json:"subnet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *IPv4) Reset()         { *m = IPv4{} }
func (m *IPv4) String() string { return proto.CompactTextString(m) }
func (*IPv4) ProtoMessage()    {}
func (*IPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{0}
}
func (m *IPv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4.Unmarshal(m, b)
}
func (m *IPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4.Marshal(b, m, deterministic)
}
func (m *IPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4.Merge(m, src)
}
func (m *IPv4) XXX_Size() int {
	return xxx_messageInfo_IPv4.Size(m)
}
func (m *IPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4 proto.InternalMessageInfo

type Ethernet struct {
	Iface                string                                                 `protobuf:"bytes,1,opt,name=iface,proto3" json:"iface,omitempty"`
	Mac                  *github_com_hpc_kraken_extensions_ipv4_customtypes.MAC `protobuf:"bytes,2,opt,name=mac,proto3,customtype=github.com/hpc/kraken/extensions/ipv4/customtypes.MAC" json:"mac,omitempty"`
	Mtu                  uint32                                                 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Control              bool                                                   `protobuf:"varint,4,opt,name=control,proto3" json:"control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *Ethernet) Reset()         { *m = Ethernet{} }
func (m *Ethernet) String() string { return proto.CompactTextString(m) }
func (*Ethernet) ProtoMessage()    {}
func (*Ethernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{1}
}
func (m *Ethernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ethernet.Unmarshal(m, b)
}
func (m *Ethernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ethernet.Marshal(b, m, deterministic)
}
func (m *Ethernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ethernet.Merge(m, src)
}
func (m *Ethernet) XXX_Size() int {
	return xxx_messageInfo_Ethernet.Size(m)
}
func (m *Ethernet) XXX_DiscardUnknown() {
	xxx_messageInfo_Ethernet.DiscardUnknown(m)
}

var xxx_messageInfo_Ethernet proto.InternalMessageInfo

func (m *Ethernet) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

func (m *Ethernet) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Ethernet) GetControl() bool {
	if m != nil {
		return m.Control
	}
	return false
}

type IPv4OverEthernet struct {
	Ifaces               map[string]*IPv4OverEthernet_ConfiguredInterface `protobuf:"bytes,1,rep,name=ifaces,proto3" json:"ifaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Routes               []*IPv4                                          `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	DnsNameservers       []*IPv4                                          `protobuf:"bytes,3,rep,name=dns_nameservers,json=dnsNameservers,proto3" json:"dns_nameservers,omitempty"`
	DnsDomains           []*IPv4                                          `protobuf:"bytes,4,rep,name=dns_domains,json=dnsDomains,proto3" json:"dns_domains,omitempty"`
	Hostname             *DNSA                                            `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *IPv4OverEthernet) Reset()         { *m = IPv4OverEthernet{} }
func (m *IPv4OverEthernet) String() string { return proto.CompactTextString(m) }
func (*IPv4OverEthernet) ProtoMessage()    {}
func (*IPv4OverEthernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{2}
}
func (m *IPv4OverEthernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4OverEthernet.Unmarshal(m, b)
}
func (m *IPv4OverEthernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4OverEthernet.Marshal(b, m, deterministic)
}
func (m *IPv4OverEthernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4OverEthernet.Merge(m, src)
}
func (m *IPv4OverEthernet) XXX_Size() int {
	return xxx_messageInfo_IPv4OverEthernet.Size(m)
}
func (m *IPv4OverEthernet) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4OverEthernet.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4OverEthernet proto.InternalMessageInfo

func (m *IPv4OverEthernet) GetIfaces() map[string]*IPv4OverEthernet_ConfiguredInterface {
	if m != nil {
		return m.Ifaces
	}
	return nil
}

func (m *IPv4OverEthernet) GetRoutes() []*IPv4 {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *IPv4OverEthernet) GetDnsNameservers() []*IPv4 {
	if m != nil {
		return m.DnsNameservers
	}
	return nil
}

func (m *IPv4OverEthernet) GetDnsDomains() []*IPv4 {
	if m != nil {
		return m.DnsDomains
	}
	return nil
}

func (m *IPv4OverEthernet) GetHostname() *DNSA {
	if m != nil {
		return m.Hostname
	}
	return nil
}

type IPv4OverEthernet_ConfiguredInterface struct {
	Eth                  *Ethernet `protobuf:"bytes,1,opt,name=eth,proto3" json:"eth,omitempty"`
	Ip                   *IPv4     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IPv4OverEthernet_ConfiguredInterface) Reset()         { *m = IPv4OverEthernet_ConfiguredInterface{} }
func (m *IPv4OverEthernet_ConfiguredInterface) String() string { return proto.CompactTextString(m) }
func (*IPv4OverEthernet_ConfiguredInterface) ProtoMessage()    {}
func (*IPv4OverEthernet_ConfiguredInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{2, 0}
}
func (m *IPv4OverEthernet_ConfiguredInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface.Unmarshal(m, b)
}
func (m *IPv4OverEthernet_ConfiguredInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface.Marshal(b, m, deterministic)
}
func (m *IPv4OverEthernet_ConfiguredInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface.Merge(m, src)
}
func (m *IPv4OverEthernet_ConfiguredInterface) XXX_Size() int {
	return xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface.Size(m)
}
func (m *IPv4OverEthernet_ConfiguredInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4OverEthernet_ConfiguredInterface proto.InternalMessageInfo

func (m *IPv4OverEthernet_ConfiguredInterface) GetEth() *Ethernet {
	if m != nil {
		return m.Eth
	}
	return nil
}

func (m *IPv4OverEthernet_ConfiguredInterface) GetIp() *IPv4 {
	if m != nil {
		return m.Ip
	}
	return nil
}

type DNSA struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Domainname           string   `protobuf:"bytes,2,opt,name=domainname,proto3" json:"domainname,omitempty"`
	Ip                   *IPv4    `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSA) Reset()         { *m = DNSA{} }
func (m *DNSA) String() string { return proto.CompactTextString(m) }
func (*DNSA) ProtoMessage()    {}
func (*DNSA) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{3}
}
func (m *DNSA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSA.Unmarshal(m, b)
}
func (m *DNSA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSA.Marshal(b, m, deterministic)
}
func (m *DNSA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSA.Merge(m, src)
}
func (m *DNSA) XXX_Size() int {
	return xxx_messageInfo_DNSA.Size(m)
}
func (m *DNSA) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSA.DiscardUnknown(m)
}

var xxx_messageInfo_DNSA proto.InternalMessageInfo

func (m *DNSA) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DNSA) GetDomainname() string {
	if m != nil {
		return m.Domainname
	}
	return ""
}

func (m *DNSA) GetIp() *IPv4 {
	if m != nil {
		return m.Ip
	}
	return nil
}

type DNSCNAME struct {
	Cname                string   `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNSCNAME) Reset()         { *m = DNSCNAME{} }
func (m *DNSCNAME) String() string { return proto.CompactTextString(m) }
func (*DNSCNAME) ProtoMessage()    {}
func (*DNSCNAME) Descriptor() ([]byte, []int) {
	return fileDescriptor_851d42603524a7cd, []int{4}
}
func (m *DNSCNAME) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSCNAME.Unmarshal(m, b)
}
func (m *DNSCNAME) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSCNAME.Marshal(b, m, deterministic)
}
func (m *DNSCNAME) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSCNAME.Merge(m, src)
}
func (m *DNSCNAME) XXX_Size() int {
	return xxx_messageInfo_DNSCNAME.Size(m)
}
func (m *DNSCNAME) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSCNAME.DiscardUnknown(m)
}

var xxx_messageInfo_DNSCNAME proto.InternalMessageInfo

func (m *DNSCNAME) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *DNSCNAME) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterType((*IPv4)(nil), "IPv4.IPv4")
	proto.RegisterType((*Ethernet)(nil), "IPv4.Ethernet")
	proto.RegisterType((*IPv4OverEthernet)(nil), "IPv4.IPv4OverEthernet")
	proto.RegisterMapType((map[string]*IPv4OverEthernet_ConfiguredInterface)(nil), "IPv4.IPv4OverEthernet.IfacesEntry")
	proto.RegisterType((*IPv4OverEthernet_ConfiguredInterface)(nil), "IPv4.IPv4OverEthernet.ConfiguredInterface")
	proto.RegisterType((*DNSA)(nil), "IPv4.DNSA")
	proto.RegisterType((*DNSCNAME)(nil), "IPv4.DNSCNAME")
}

func init() { proto.RegisterFile("ipv4.proto", fileDescriptor_851d42603524a7cd) }

var fileDescriptor_851d42603524a7cd = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xed, 0x34, 0x84, 0x09, 0x94, 0x6a, 0xe1, 0xb0, 0xca, 0x81, 0x5a, 0x3e, 0xa0, 0x08,
	0x84, 0x2d, 0xb5, 0x41, 0x2a, 0x85, 0x03, 0x69, 0x12, 0x89, 0x08, 0x35, 0x44, 0x9b, 0x1b, 0x07,
	0x90, 0xe3, 0x6c, 0x62, 0x2b, 0xf5, 0xae, 0xb5, 0xbb, 0xb6, 0xc8, 0xa3, 0x70, 0xe5, 0x29, 0x78,
	0x96, 0x1e, 0xfa, 0x2c, 0x68, 0xd7, 0x6e, 0xe2, 0xd0, 0x72, 0x40, 0xdc, 0x76, 0xfc, 0xcd, 0x37,
	0xdf, 0x37, 0x3f, 0x06, 0x48, 0xb2, 0xa2, 0xe7, 0x67, 0x82, 0x2b, 0x8e, 0x1a, 0xe3, 0x69, 0xd1,
	0xeb, 0xbc, 0x5e, 0x25, 0x2a, 0xce, 0xe7, 0x7e, 0xc4, 0xd3, 0x60, 0xc5, 0x57, 0x3c, 0x30, 0xe0,
	0x3c, 0x5f, 0x9a, 0xc8, 0x04, 0xe6, 0x55, 0x92, 0xbc, 0x9f, 0x16, 0x18, 0x1e, 0xfa, 0x08, 0x76,
	0x92, 0x61, 0xdb, 0xb5, 0xba, 0x8f, 0x2e, 0xce, 0xae, 0x6f, 0x8e, 0x7b, 0xb5, 0x3a, 0x71, 0x16,
	0x05, 0x6b, 0x11, 0xae, 0x29, 0x0b, 0xe8, 0x77, 0x45, 0x99, 0x4c, 0x38, 0x93, 0x81, 0x96, 0x0e,
	0xa2, 0x5c, 0x2a, 0x9e, 0xaa, 0x4d, 0x46, 0xa5, 0x3f, 0x9e, 0x12, 0x3b, 0xc9, 0xd0, 0x14, 0x9a,
	0x32, 0x9f, 0x33, 0xaa, 0xb0, 0xf3, 0x9f, 0xd5, 0xaa, 0x3a, 0xde, 0x0f, 0x0b, 0x5a, 0x23, 0x15,
	0x53, 0xc1, 0xa8, 0x42, 0xcf, 0xe0, 0x20, 0x59, 0x86, 0x11, 0xc5, 0x96, 0x6b, 0x75, 0x1f, 0x92,
	0x32, 0x40, 0x9f, 0xc0, 0x49, 0xc3, 0xa8, 0xf2, 0xff, 0xf6, 0xfa, 0xe6, 0xf8, 0xcd, 0xbf, 0x2b,
	0x5e, 0xf6, 0x07, 0x44, 0x57, 0x41, 0x47, 0xe0, 0xa4, 0x2a, 0x37, 0xf6, 0x1f, 0x13, 0xfd, 0x44,
	0x18, 0x1e, 0x44, 0x9c, 0x29, 0xc1, 0xaf, 0x70, 0xc3, 0xb5, 0xba, 0x2d, 0x72, 0x1b, 0x7a, 0xbf,
	0x1c, 0x38, 0xd2, 0x03, 0xfc, 0x5c, 0x50, 0xb1, 0xf5, 0x78, 0x0e, 0x4d, 0x63, 0x4b, 0x62, 0xcb,
	0x75, 0xba, 0xed, 0x13, 0xcf, 0xd7, 0x29, 0xfe, 0x9f, 0x79, 0xfe, 0xd8, 0x24, 0x8d, 0x98, 0x12,
	0x1b, 0x52, 0x31, 0x90, 0x07, 0x4d, 0xc1, 0x73, 0x45, 0x25, 0xb6, 0x0d, 0x17, 0x76, 0x5c, 0x52,
	0x21, 0xe8, 0x14, 0x9e, 0x2c, 0x98, 0xfc, 0xc6, 0xc2, 0x94, 0x4a, 0x2a, 0x0a, 0x2a, 0x24, 0x76,
	0xee, 0x24, 0x1f, 0x2e, 0x98, 0x9c, 0xec, 0x32, 0xd0, 0x2b, 0x68, 0x6b, 0xd2, 0x82, 0xa7, 0x61,
	0xc2, 0x24, 0x6e, 0xdc, 0x21, 0xc0, 0x82, 0xc9, 0x61, 0x89, 0xa2, 0x17, 0xd0, 0x8a, 0xb9, 0x54,
	0x5a, 0x01, 0x1f, 0xb8, 0xd6, 0x2e, 0x73, 0x38, 0x99, 0xf5, 0xc9, 0x16, 0xeb, 0xcc, 0xe0, 0xe9,
	0x80, 0xb3, 0x65, 0xb2, 0xca, 0x05, 0x5d, 0x8c, 0x99, 0xa2, 0xc2, 0xac, 0xc3, 0x05, 0x87, 0xaa,
	0xd8, 0xac, 0xa8, 0x7d, 0x72, 0x58, 0x32, 0x6f, 0xbb, 0x26, 0x1a, 0x42, 0x9d, 0xed, 0xbd, 0xed,
	0x9b, 0xb0, 0x93, 0xac, 0x43, 0xa1, 0x5d, 0x9b, 0x8c, 0x5e, 0xc7, 0x9a, 0x6e, 0xaa, 0x7d, 0xeb,
	0x27, 0xfa, 0x00, 0x07, 0x45, 0x78, 0x95, 0xd3, 0x8a, 0xff, 0xf2, 0x2f, 0xe3, 0xbd, 0xc7, 0x19,
	0x29, 0x89, 0xe7, 0xf6, 0x99, 0xe5, 0x7d, 0x85, 0x86, 0xee, 0x06, 0x75, 0x6a, 0xbd, 0x96, 0x22,
	0xdb, 0x18, 0x3d, 0x07, 0x28, 0x07, 0x66, 0x50, 0xdb, 0xa0, 0xb5, 0x2f, 0x55, 0x1b, 0xce, 0x7d,
	0x6d, 0x78, 0xef, 0xa1, 0x35, 0x9c, 0xcc, 0x06, 0x93, 0xfe, 0xe5, 0x48, 0x5f, 0x6d, 0x54, 0x13,
	0x28, 0x83, 0x3d, 0x65, 0x7b, 0x5f, 0xf9, 0xa2, 0xf5, 0xa5, 0xe9, 0xbf, 0xd3, 0x37, 0x3a, 0x6f,
	0x9a, 0x5f, 0xf5, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x68, 0x23, 0xce, 0xed, 0x03,
	0x00, 0x00,
}
