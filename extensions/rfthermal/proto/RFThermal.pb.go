// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RFThermal.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RFThermal_RFCPUThermalState int32

const (
	RFThermal_CPU_TEMP_NONE     RFThermal_RFCPUThermalState = 0
	RFThermal_CPU_TEMP_NORMAL   RFThermal_RFCPUThermalState = 1
	RFThermal_CPU_TEMP_HIGH     RFThermal_RFCPUThermalState = 2
	RFThermal_CPU_TEMP_CRITICAL RFThermal_RFCPUThermalState = 3
)

var RFThermal_RFCPUThermalState_name = map[int32]string{
	0: "CPU_TEMP_NONE",
	1: "CPU_TEMP_NORMAL",
	2: "CPU_TEMP_HIGH",
	3: "CPU_TEMP_CRITICAL",
}
var RFThermal_RFCPUThermalState_value = map[string]int32{
	"CPU_TEMP_NONE":     0,
	"CPU_TEMP_NORMAL":   1,
	"CPU_TEMP_HIGH":     2,
	"CPU_TEMP_CRITICAL": 3,
}

func (x RFThermal_RFCPUThermalState) String() string {
	return proto.EnumName(RFThermal_RFCPUThermalState_name, int32(x))
}
func (RFThermal_RFCPUThermalState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_RFThermal_0d8f465b9e7fef70, []int{0, 0}
}

type RFThermal struct {
	State                RFThermal_RFCPUThermalState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.RFThermal_RFCPUThermalState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RFThermal) Reset()         { *m = RFThermal{} }
func (m *RFThermal) String() string { return proto.CompactTextString(m) }
func (*RFThermal) ProtoMessage()    {}
func (*RFThermal) Descriptor() ([]byte, []int) {
	return fileDescriptor_RFThermal_0d8f465b9e7fef70, []int{0}
}
func (m *RFThermal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RFThermal.Unmarshal(m, b)
}
func (m *RFThermal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RFThermal.Marshal(b, m, deterministic)
}
func (dst *RFThermal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RFThermal.Merge(dst, src)
}
func (m *RFThermal) XXX_Size() int {
	return xxx_messageInfo_RFThermal.Size(m)
}
func (m *RFThermal) XXX_DiscardUnknown() {
	xxx_messageInfo_RFThermal.DiscardUnknown(m)
}

var xxx_messageInfo_RFThermal proto.InternalMessageInfo

func (m *RFThermal) GetState() RFThermal_RFCPUThermalState {
	if m != nil {
		return m.State
	}
	return RFThermal_CPU_TEMP_NONE
}

func init() {
	proto.RegisterType((*RFThermal)(nil), "proto.RFThermal")
	proto.RegisterEnum("proto.RFThermal_RFCPUThermalState", RFThermal_RFCPUThermalState_name, RFThermal_RFCPUThermalState_value)
}

func init() { proto.RegisterFile("RFThermal.proto", fileDescriptor_RFThermal_0d8f465b9e7fef70) }

var fileDescriptor_RFThermal_0d8f465b9e7fef70 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0f, 0x72, 0x0b, 0xc9,
	0x48, 0x2d, 0xca, 0x4d, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a,
	0x6b, 0x18, 0xb9, 0x38, 0xe1, 0x52, 0x42, 0x16, 0x5c, 0xac, 0xc5, 0x25, 0x89, 0x25, 0xa9, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x4a, 0x10, 0xb5, 0x7a, 0x08, 0xbd, 0x41, 0x6e, 0xce, 0x01,
	0xa1, 0x50, 0x4e, 0x30, 0x48, 0x65, 0x10, 0x44, 0x83, 0x52, 0x2a, 0x97, 0x20, 0x86, 0x9c, 0x90,
	0x20, 0x17, 0xaf, 0x73, 0x40, 0x68, 0x7c, 0x88, 0xab, 0x6f, 0x40, 0xbc, 0x9f, 0xbf, 0x9f, 0xab,
	0x00, 0x83, 0x90, 0x30, 0x17, 0x3f, 0x92, 0x50, 0x90, 0xaf, 0xa3, 0x8f, 0x00, 0x23, 0x8a, 0x3a,
	0x0f, 0x4f, 0x77, 0x0f, 0x01, 0x26, 0x21, 0x51, 0x2e, 0x41, 0xb8, 0x90, 0x73, 0x90, 0x67, 0x88,
	0xa7, 0xb3, 0xa3, 0x8f, 0x00, 0x73, 0x12, 0x1b, 0xd8, 0x41, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0xa1, 0x7a, 0xda, 0xcf, 0x00, 0x00, 0x00,
}
