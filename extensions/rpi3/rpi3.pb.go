// rpi3.proto: describes Bitscope/Raspberry Pi 3B specific state objects
//
// Author: J. Lowell Wofford <lowell@lanl.gov>
//
// This software is open source software available under the BSD-3 license.
// Copyright (c) 2018, Triad National Security, LLC
// See LICENSE file for details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: rpi3.proto

package rpi3

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Pi_Model int32

const (
	Pi_ThreeB     Pi_Model = 0
	Pi_ThreeBPlus Pi_Model = 1
)

// Enum value maps for Pi_Model.
var (
	Pi_Model_name = map[int32]string{
		0: "ThreeB",
		1: "ThreeBPlus",
	}
	Pi_Model_value = map[string]int32{
		"ThreeB":     0,
		"ThreeBPlus": 1,
	}
)

func (x Pi_Model) Enum() *Pi_Model {
	p := new(Pi_Model)
	*p = x
	return p
}

func (x Pi_Model) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pi_Model) Descriptor() protoreflect.EnumDescriptor {
	return file_rpi3_proto_enumTypes[0].Descriptor()
}

func (Pi_Model) Type() protoreflect.EnumType {
	return &file_rpi3_proto_enumTypes[0]
}

func (x Pi_Model) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pi_Model.Descriptor instead.
func (Pi_Model) EnumDescriptor() ([]byte, []int) {
	return file_rpi3_proto_rawDescGZIP(), []int{0, 0}
}

type Pi_PXE int32

const (
	Pi_NONE Pi_PXE = 0
	Pi_WAIT Pi_PXE = 1 // PXE information passed to module
	Pi_INIT Pi_PXE = 2 // DHCP handshake complete
)

// Enum value maps for Pi_PXE.
var (
	Pi_PXE_name = map[int32]string{
		0: "NONE",
		1: "WAIT",
		2: "INIT",
	}
	Pi_PXE_value = map[string]int32{
		"NONE": 0,
		"WAIT": 1,
		"INIT": 2,
	}
)

func (x Pi_PXE) Enum() *Pi_PXE {
	p := new(Pi_PXE)
	*p = x
	return p
}

func (x Pi_PXE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pi_PXE) Descriptor() protoreflect.EnumDescriptor {
	return file_rpi3_proto_enumTypes[1].Descriptor()
}

func (Pi_PXE) Type() protoreflect.EnumType {
	return &file_rpi3_proto_enumTypes[1]
}

func (x Pi_PXE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pi_PXE.Descriptor instead.
func (Pi_PXE) EnumDescriptor() ([]byte, []int) {
	return file_rpi3_proto_rawDescGZIP(), []int{0, 1}
}

type Pi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chassis string   `protobuf:"bytes,1,opt,name=chassis,proto3" json:"chassis,omitempty"` // chassis name
	Rank    uint32   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`      // Pi's rank in chassis
	Model   Pi_Model `protobuf:"varint,3,opt,name=model,proto3,enum=RPi3.Pi_Model" json:"model,omitempty"`
	Pxe     Pi_PXE   `protobuf:"varint,4,opt,name=pxe,proto3,enum=RPi3.Pi_PXE" json:"pxe,omitempty"`
}

func (x *Pi) Reset() {
	*x = Pi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpi3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pi) ProtoMessage() {}

func (x *Pi) ProtoReflect() protoreflect.Message {
	mi := &file_rpi3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pi.ProtoReflect.Descriptor instead.
func (*Pi) Descriptor() ([]byte, []int) {
	return file_rpi3_proto_rawDescGZIP(), []int{0}
}

func (x *Pi) GetChassis() string {
	if x != nil {
		return x.Chassis
	}
	return ""
}

func (x *Pi) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Pi) GetModel() Pi_Model {
	if x != nil {
		return x.Model
	}
	return Pi_ThreeB
}

func (x *Pi) GetPxe() Pi_PXE {
	if x != nil {
		return x.Pxe
	}
	return Pi_NONE
}

var File_rpi3_proto protoreflect.FileDescriptor

var file_rpi3_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x70, 0x69, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x52, 0x50,
	0x69, 0x33, 0x22, 0xc2, 0x01, 0x0a, 0x02, 0x50, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x50, 0x69, 0x33, 0x2e, 0x50, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x03, 0x70, 0x78, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x52, 0x50, 0x69,
	0x33, 0x2e, 0x50, 0x69, 0x2e, 0x50, 0x58, 0x45, 0x52, 0x03, 0x70, 0x78, 0x65, 0x22, 0x23, 0x0a,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x65, 0x42,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x65, 0x42, 0x50, 0x6c, 0x75, 0x73,
	0x10, 0x01, 0x22, 0x23, 0x0a, 0x03, 0x50, 0x58, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x72, 0x70, 0x69,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpi3_proto_rawDescOnce sync.Once
	file_rpi3_proto_rawDescData = file_rpi3_proto_rawDesc
)

func file_rpi3_proto_rawDescGZIP() []byte {
	file_rpi3_proto_rawDescOnce.Do(func() {
		file_rpi3_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpi3_proto_rawDescData)
	})
	return file_rpi3_proto_rawDescData
}

var file_rpi3_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rpi3_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_rpi3_proto_goTypes = []interface{}{
	(Pi_Model)(0), // 0: RPi3.Pi.Model
	(Pi_PXE)(0),   // 1: RPi3.Pi.PXE
	(*Pi)(nil),    // 2: RPi3.Pi
}
var file_rpi3_proto_depIdxs = []int32{
	0, // 0: RPi3.Pi.model:type_name -> RPi3.Pi.Model
	1, // 1: RPi3.Pi.pxe:type_name -> RPi3.Pi.PXE
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_rpi3_proto_init() }
func file_rpi3_proto_init() {
	if File_rpi3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpi3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpi3_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpi3_proto_goTypes,
		DependencyIndexes: file_rpi3_proto_depIdxs,
		EnumInfos:         file_rpi3_proto_enumTypes,
		MessageInfos:      file_rpi3_proto_msgTypes,
	}.Build()
	File_rpi3_proto = out.File
	file_rpi3_proto_rawDesc = nil
	file_rpi3_proto_goTypes = nil
	file_rpi3_proto_depIdxs = nil
}
