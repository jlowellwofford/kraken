// hostfrequencyscaling.proto: describes the hostfrequencyscaling object
//
// Authors: Ghazanfar Ali <ghazanfar.ali@ttu.edu>,Kevin Pelzel <kevinpelzel22@gmail.com>; J. Lowell Wofford <lowell@lanl.gov>
//
// This software is open source software available under the BSD-3 license.
// Copyright (c) 2019, Triad National Security, LLC
// See LICENSE file for details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: hostfrequencyscaling.proto

package hostfrequencyscaling

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreqScalPolicies                       map[string]*Policy `protobuf:"bytes,1,rep,name=freq_scal_policies,json=freqScalPolicies,proto3" json:"freq_scal_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FreqSensorUrl                          string             `protobuf:"bytes,2,opt,name=freq_sensor_url,json=freqSensorUrl,proto3" json:"freq_sensor_url,omitempty"`
	ScalingFreqPolicy                      string             `protobuf:"bytes,3,opt,name=scaling_freq_policy,json=scalingFreqPolicy,proto3" json:"scaling_freq_policy,omitempty"`
	LowToHighScaler                        string             `protobuf:"bytes,4,opt,name=low_to_high_scaler,json=lowToHighScaler,proto3" json:"low_to_high_scaler,omitempty"`
	HighToLowScaler                        string             `protobuf:"bytes,5,opt,name=high_to_low_scaler,json=highToLowScaler,proto3" json:"high_to_low_scaler,omitempty"`
	TimeBoundThrottleRetentionDuration     int32              `protobuf:"varint,6,opt,name=time_bound_throttle_retention_duration,json=timeBoundThrottleRetentionDuration,proto3" json:"time_bound_throttle_retention_duration,omitempty"`
	ThrottleRetention                      bool               `protobuf:"varint,7,opt,name=throttle_retention,json=throttleRetention,proto3" json:"throttle_retention,omitempty"`
	ThermalSensorUrl                       string             `protobuf:"bytes,8,opt,name=thermal_sensor_url,json=thermalSensorUrl,proto3" json:"thermal_sensor_url,omitempty"`
	TimeBoundThrottleRetention             bool               `protobuf:"varint,9,opt,name=time_bound_throttle_retention,json=timeBoundThrottleRetention,proto3" json:"time_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetention          bool               `protobuf:"varint,10,opt,name=thermal_bound_throttle_retention,json=thermalBoundThrottleRetention,proto3" json:"thermal_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetentionThreshold int32              `protobuf:"varint,11,opt,name=thermal_bound_throttle_retention_threshold,json=thermalBoundThrottleRetentionThreshold,proto3" json:"thermal_bound_throttle_retention_threshold,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostfrequencyscaling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_hostfrequencyscaling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_hostfrequencyscaling_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetFreqScalPolicies() map[string]*Policy {
	if x != nil {
		return x.FreqScalPolicies
	}
	return nil
}

func (x *Config) GetFreqSensorUrl() string {
	if x != nil {
		return x.FreqSensorUrl
	}
	return ""
}

func (x *Config) GetScalingFreqPolicy() string {
	if x != nil {
		return x.ScalingFreqPolicy
	}
	return ""
}

func (x *Config) GetLowToHighScaler() string {
	if x != nil {
		return x.LowToHighScaler
	}
	return ""
}

func (x *Config) GetHighToLowScaler() string {
	if x != nil {
		return x.HighToLowScaler
	}
	return ""
}

func (x *Config) GetTimeBoundThrottleRetentionDuration() int32 {
	if x != nil {
		return x.TimeBoundThrottleRetentionDuration
	}
	return 0
}

func (x *Config) GetThrottleRetention() bool {
	if x != nil {
		return x.ThrottleRetention
	}
	return false
}

func (x *Config) GetThermalSensorUrl() string {
	if x != nil {
		return x.ThermalSensorUrl
	}
	return ""
}

func (x *Config) GetTimeBoundThrottleRetention() bool {
	if x != nil {
		return x.TimeBoundThrottleRetention
	}
	return false
}

func (x *Config) GetThermalBoundThrottleRetention() bool {
	if x != nil {
		return x.ThermalBoundThrottleRetention
	}
	return false
}

func (x *Config) GetThermalBoundThrottleRetentionThreshold() int32 {
	if x != nil {
		return x.ThermalBoundThrottleRetentionThreshold
	}
	return 0
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalingGovernor string `protobuf:"bytes,1,opt,name=scaling_governor,json=scalingGovernor,proto3" json:"scaling_governor,omitempty"`
	ScalingMinFreq  string `protobuf:"bytes,2,opt,name=scaling_min_freq,json=scalingMinFreq,proto3" json:"scaling_min_freq,omitempty"`
	ScalingMaxFreq  string `protobuf:"bytes,3,opt,name=scaling_max_freq,json=scalingMaxFreq,proto3" json:"scaling_max_freq,omitempty"`
	NodeArch        string `protobuf:"bytes,4,opt,name=node_arch,json=nodeArch,proto3" json:"node_arch,omitempty"`
	NodePlatform    string `protobuf:"bytes,5,opt,name=node_platform,json=nodePlatform,proto3" json:"node_platform,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hostfrequencyscaling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_hostfrequencyscaling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_hostfrequencyscaling_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetScalingGovernor() string {
	if x != nil {
		return x.ScalingGovernor
	}
	return ""
}

func (x *Policy) GetScalingMinFreq() string {
	if x != nil {
		return x.ScalingMinFreq
	}
	return ""
}

func (x *Policy) GetScalingMaxFreq() string {
	if x != nil {
		return x.ScalingMaxFreq
	}
	return ""
}

func (x *Policy) GetNodeArch() string {
	if x != nil {
		return x.NodeArch
	}
	return ""
}

func (x *Policy) GetNodePlatform() string {
	if x != nil {
		return x.NodePlatform
	}
	return ""
}

var File_hostfrequencyscaling_proto protoreflect.FileDescriptor

var file_hostfrequencyscaling_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x68, 0x6f, 0x73, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x48, 0x6f,
	0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x22, 0x98, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a,
	0x12, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x53, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66,
	0x72, 0x65, 0x71, 0x53, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65,
	0x71, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x6f, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x54, 0x6f, 0x4c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x12, 0x52, 0x0a, 0x26, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x2a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x26, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x61, 0x0a, 0x15, 0x46, 0x72,
	0x65, 0x71, 0x53, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x18, 0x5a, 0x16, 0x2e, 0x3b, 0x68,
	0x6f, 0x73, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hostfrequencyscaling_proto_rawDescOnce sync.Once
	file_hostfrequencyscaling_proto_rawDescData = file_hostfrequencyscaling_proto_rawDesc
)

func file_hostfrequencyscaling_proto_rawDescGZIP() []byte {
	file_hostfrequencyscaling_proto_rawDescOnce.Do(func() {
		file_hostfrequencyscaling_proto_rawDescData = protoimpl.X.CompressGZIP(file_hostfrequencyscaling_proto_rawDescData)
	})
	return file_hostfrequencyscaling_proto_rawDescData
}

var file_hostfrequencyscaling_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_hostfrequencyscaling_proto_goTypes = []interface{}{
	(*Config)(nil), // 0: HostFrequencyScaling.Config
	(*Policy)(nil), // 1: HostFrequencyScaling.Policy
	nil,            // 2: HostFrequencyScaling.Config.FreqScalPoliciesEntry
}
var file_hostfrequencyscaling_proto_depIdxs = []int32{
	2, // 0: HostFrequencyScaling.Config.freq_scal_policies:type_name -> HostFrequencyScaling.Config.FreqScalPoliciesEntry
	1, // 1: HostFrequencyScaling.Config.FreqScalPoliciesEntry.value:type_name -> HostFrequencyScaling.Policy
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_hostfrequencyscaling_proto_init() }
func file_hostfrequencyscaling_proto_init() {
	if File_hostfrequencyscaling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hostfrequencyscaling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hostfrequencyscaling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hostfrequencyscaling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hostfrequencyscaling_proto_goTypes,
		DependencyIndexes: file_hostfrequencyscaling_proto_depIdxs,
		MessageInfos:      file_hostfrequencyscaling_proto_msgTypes,
	}.Build()
	File_hostfrequencyscaling_proto = out.File
	file_hostfrequencyscaling_proto_rawDesc = nil
	file_hostfrequencyscaling_proto_goTypes = nil
	file_hostfrequencyscaling_proto_depIdxs = nil
}
