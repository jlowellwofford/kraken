// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hostfrequencyscaling.proto

package hostfrequencyscaling

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	FreqScalPolicies                       map[string]*Policy `protobuf:"bytes,1,rep,name=freq_scal_policies,json=freqScalPolicies,proto3" json:"freq_scal_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FreqSensorUrl                          string             `protobuf:"bytes,2,opt,name=freq_sensor_url,json=freqSensorUrl,proto3" json:"freq_sensor_url,omitempty"`
	ScalingFreqPolicy                      string             `protobuf:"bytes,3,opt,name=scaling_freq_policy,json=scalingFreqPolicy,proto3" json:"scaling_freq_policy,omitempty"`
	LowToHighScaler                        string             `protobuf:"bytes,4,opt,name=low_to_high_scaler,json=lowToHighScaler,proto3" json:"low_to_high_scaler,omitempty"`
	HighToLowScaler                        string             `protobuf:"bytes,5,opt,name=high_to_low_scaler,json=highToLowScaler,proto3" json:"high_to_low_scaler,omitempty"`
	TimeBoundThrottleRetentionDuration     int32              `protobuf:"varint,6,opt,name=time_bound_throttle_retention_duration,json=timeBoundThrottleRetentionDuration,proto3" json:"time_bound_throttle_retention_duration,omitempty"`
	ThrottleRetention                      bool               `protobuf:"varint,7,opt,name=throttle_retention,json=throttleRetention,proto3" json:"throttle_retention,omitempty"`
	ThermalSensorUrl                       string             `protobuf:"bytes,8,opt,name=thermal_sensor_url,json=thermalSensorUrl,proto3" json:"thermal_sensor_url,omitempty"`
	TimeBoundThrottleRetention             bool               `protobuf:"varint,9,opt,name=time_bound_throttle_retention,json=timeBoundThrottleRetention,proto3" json:"time_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetention          bool               `protobuf:"varint,10,opt,name=thermal_bound_throttle_retention,json=thermalBoundThrottleRetention,proto3" json:"thermal_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetentionThreshold int32              `protobuf:"varint,11,opt,name=thermal_bound_throttle_retention_threshold,json=thermalBoundThrottleRetentionThreshold,proto3" json:"thermal_bound_throttle_retention_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}           `json:"-"`
	XXX_unrecognized                       []byte             `json:"-"`
	XXX_sizecache                          int32              `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70f0aaf9840244f, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetFreqScalPolicies() map[string]*Policy {
	if m != nil {
		return m.FreqScalPolicies
	}
	return nil
}

func (m *Config) GetFreqSensorUrl() string {
	if m != nil {
		return m.FreqSensorUrl
	}
	return ""
}

func (m *Config) GetScalingFreqPolicy() string {
	if m != nil {
		return m.ScalingFreqPolicy
	}
	return ""
}

func (m *Config) GetLowToHighScaler() string {
	if m != nil {
		return m.LowToHighScaler
	}
	return ""
}

func (m *Config) GetHighToLowScaler() string {
	if m != nil {
		return m.HighToLowScaler
	}
	return ""
}

func (m *Config) GetTimeBoundThrottleRetentionDuration() int32 {
	if m != nil {
		return m.TimeBoundThrottleRetentionDuration
	}
	return 0
}

func (m *Config) GetThrottleRetention() bool {
	if m != nil {
		return m.ThrottleRetention
	}
	return false
}

func (m *Config) GetThermalSensorUrl() string {
	if m != nil {
		return m.ThermalSensorUrl
	}
	return ""
}

func (m *Config) GetTimeBoundThrottleRetention() bool {
	if m != nil {
		return m.TimeBoundThrottleRetention
	}
	return false
}

func (m *Config) GetThermalBoundThrottleRetention() bool {
	if m != nil {
		return m.ThermalBoundThrottleRetention
	}
	return false
}

func (m *Config) GetThermalBoundThrottleRetentionThreshold() int32 {
	if m != nil {
		return m.ThermalBoundThrottleRetentionThreshold
	}
	return 0
}

type Policy struct {
	ScalingGovernor      string   `protobuf:"bytes,1,opt,name=scaling_governor,json=scalingGovernor,proto3" json:"scaling_governor,omitempty"`
	ScalingMinFreq       string   `protobuf:"bytes,2,opt,name=scaling_min_freq,json=scalingMinFreq,proto3" json:"scaling_min_freq,omitempty"`
	ScalingMaxFreq       string   `protobuf:"bytes,3,opt,name=scaling_max_freq,json=scalingMaxFreq,proto3" json:"scaling_max_freq,omitempty"`
	NodeArch             string   `protobuf:"bytes,4,opt,name=node_arch,json=nodeArch,proto3" json:"node_arch,omitempty"`
	NodePlatform         string   `protobuf:"bytes,5,opt,name=node_platform,json=nodePlatform,proto3" json:"node_platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70f0aaf9840244f, []int{1}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetScalingGovernor() string {
	if m != nil {
		return m.ScalingGovernor
	}
	return ""
}

func (m *Policy) GetScalingMinFreq() string {
	if m != nil {
		return m.ScalingMinFreq
	}
	return ""
}

func (m *Policy) GetScalingMaxFreq() string {
	if m != nil {
		return m.ScalingMaxFreq
	}
	return ""
}

func (m *Policy) GetNodeArch() string {
	if m != nil {
		return m.NodeArch
	}
	return ""
}

func (m *Policy) GetNodePlatform() string {
	if m != nil {
		return m.NodePlatform
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "HostFrequencyScaling.Config")
	proto.RegisterMapType((map[string]*Policy)(nil), "HostFrequencyScaling.Config.FreqScalPoliciesEntry")
	proto.RegisterType((*Policy)(nil), "HostFrequencyScaling.Policy")
}

func init() { proto.RegisterFile("hostfrequencyscaling.proto", fileDescriptor_c70f0aaf9840244f) }

var fileDescriptor_c70f0aaf9840244f = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0x86, 0x84, 0x64, 0x43, 0x49, 0xba, 0x7c, 0x68, 0x15, 0xa8, 0x14, 0x05, 0x29,
	0x0a, 0x5f, 0x3e, 0x84, 0x0b, 0x82, 0x53, 0xcb, 0x47, 0x7b, 0x00, 0xa9, 0x72, 0xc3, 0xa5, 0x97,
	0xc5, 0x75, 0x36, 0xf6, 0x8a, 0xcd, 0x4e, 0x58, 0xaf, 0x9b, 0xfa, 0x9f, 0xf0, 0x97, 0xf8, 0x57,
	0x68, 0xc7, 0x6b, 0x95, 0x96, 0xa4, 0xdc, 0xac, 0x77, 0x9e, 0x79, 0x67, 0x3c, 0x7a, 0xb5, 0x64,
	0x90, 0x41, 0x6e, 0x17, 0x46, 0xfc, 0x2c, 0x84, 0x4e, 0xca, 0x3c, 0x89, 0x95, 0xd4, 0x69, 0xb8,
	0x32, 0x60, 0x81, 0x3e, 0x3c, 0x86, 0xdc, 0x7e, 0xae, 0x6b, 0xa7, 0x55, 0x6d, 0xf4, 0xab, 0x45,
	0x5a, 0x1f, 0x40, 0x2f, 0x64, 0x4a, 0xbf, 0x13, 0xea, 0x5a, 0xb9, 0x6b, 0xe3, 0x2b, 0x50, 0x32,
	0x91, 0x22, 0x67, 0xc1, 0xb0, 0x31, 0xe9, 0x4e, 0xa7, 0xe1, 0xa6, 0xee, 0xb0, 0xea, 0x0c, 0x9d,
	0xee, 0xa4, 0x13, 0xdf, 0xf4, 0x49, 0x5b, 0x53, 0x46, 0xfd, 0xc5, 0x0d, 0x99, 0x8e, 0x49, 0xaf,
	0x9a, 0x20, 0x74, 0x0e, 0x86, 0x17, 0x46, 0xb1, 0x9d, 0x61, 0x30, 0xe9, 0x44, 0xbb, 0x88, 0xa2,
	0xfa, 0xcd, 0x28, 0x1a, 0x92, 0x07, 0x7e, 0x77, 0x8e, 0x3c, 0x2e, 0x53, 0xb2, 0x06, 0xb2, 0x7b,
	0xbe, 0xe4, 0x86, 0xa2, 0x73, 0x49, 0x5f, 0x12, 0xaa, 0x60, 0xcd, 0x2d, 0xf0, 0x4c, 0xa6, 0x19,
	0xfe, 0x80, 0x30, 0xec, 0x0e, 0xe2, 0x3d, 0x05, 0xeb, 0x19, 0x1c, 0xcb, 0x34, 0x3b, 0x45, 0xd9,
	0xc1, 0x48, 0x59, 0xe0, 0xae, 0xc9, 0xc3, 0xcd, 0x0a, 0x76, 0x95, 0x19, 0x7c, 0x81, 0xb5, 0x87,
	0x23, 0x32, 0xb6, 0x72, 0x29, 0xf8, 0x39, 0x14, 0x7a, 0xce, 0x6d, 0x66, 0xc0, 0x5a, 0x25, 0xb8,
	0x11, 0x56, 0x68, 0x2b, 0x41, 0xf3, 0x79, 0x61, 0x62, 0xf7, 0xc1, 0x5a, 0xc3, 0x60, 0xd2, 0x8c,
	0x46, 0x8e, 0x3e, 0x74, 0xf0, 0xcc, 0xb3, 0x51, 0x8d, 0x7e, 0xf4, 0x24, 0x7d, 0x4d, 0xe8, 0xbf,
	0x46, 0xec, 0xee, 0x30, 0x98, 0xb4, 0xa3, 0x3d, 0x7b, 0xb3, 0x8d, 0xbe, 0x72, 0xb8, 0x30, 0xcb,
	0x58, 0xfd, 0x7d, 0xb7, 0x36, 0xee, 0xdb, 0xf7, 0x95, 0xab, 0xd3, 0x1d, 0x90, 0xfd, 0x5b, 0x17,
	0x66, 0x1d, 0x9c, 0x33, 0xd8, 0xbe, 0x27, 0x3d, 0x22, 0xc3, 0x7a, 0xe0, 0x56, 0x17, 0x82, 0x2e,
	0xfb, 0x9e, 0xdb, 0x62, 0x74, 0x46, 0x5e, 0xfc, 0xcf, 0xc8, 0x49, 0x22, 0xcf, 0x40, 0xcd, 0x59,
	0x17, 0x0f, 0x38, 0xbe, 0xd5, 0x72, 0x56, 0xd3, 0x83, 0x98, 0x3c, 0xda, 0x98, 0x3a, 0xda, 0x27,
	0x8d, 0x1f, 0xa2, 0x64, 0x01, 0xde, 0xc7, 0x7d, 0xd2, 0x29, 0x69, 0x5e, 0xc4, 0xaa, 0x10, 0x98,
	0xb5, 0xee, 0xf4, 0xe9, 0xe6, 0x28, 0x57, 0x51, 0x8a, 0x2a, 0xf4, 0xdd, 0xce, 0xdb, 0x60, 0xf4,
	0x3b, 0x20, 0x2d, 0x1f, 0xb0, 0xe7, 0xa4, 0x5f, 0x07, 0x32, 0x85, 0x0b, 0x61, 0x34, 0x18, 0x3f,
	0xa1, 0xe7, 0xf5, 0x23, 0x2f, 0xd3, 0xc9, 0x15, 0xba, 0x94, 0x1a, 0xf3, 0xeb, 0x43, 0x7e, 0xdf,
	0xeb, 0x5f, 0xa5, 0x76, 0xd3, 0xaf, 0x91, 0xf1, 0x65, 0x45, 0x36, 0xae, 0x93, 0xf1, 0x25, 0x92,
	0x4f, 0x48, 0x47, 0xc3, 0x5c, 0xf0, 0xd8, 0x24, 0x99, 0x8f, 0x75, 0xdb, 0x09, 0x07, 0x26, 0xc9,
	0xe8, 0x33, 0xb2, 0x8b, 0xc5, 0x95, 0x8a, 0xed, 0x02, 0xcc, 0xd2, 0x47, 0xf9, 0x9e, 0x13, 0x4f,
	0xbc, 0x76, 0xc8, 0xce, 0x1e, 0x87, 0xef, 0x37, 0x3d, 0x0e, 0xe7, 0x2d, 0x7c, 0x1d, 0xde, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x49, 0x13, 0x4d, 0x3b, 0x04, 0x00, 0x00,
}
