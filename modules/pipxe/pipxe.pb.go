// pipxe.proto: describes the PiPXEConfig object
//
// Author: J. Lowell Wofford <lowell@lanl.gov>
//
// This software is open source software available under the BSD-3 license.
// Copyright (c) 2018, Triad National Security, LLC
// See LICENSE file for details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: pipxe.proto

package pipxe

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrvIfaceUrl string `protobuf:"bytes,1,opt,name=srv_iface_url,json=srvIfaceUrl,proto3" json:"srv_iface_url,omitempty"` // interface DHCP/TFTP listen on
	SrvIpUrl    string `protobuf:"bytes,2,opt,name=srv_ip_url,json=srvIpUrl,proto3" json:"srv_ip_url,omitempty"`          // interface DHCP/TFTP listen on
	IpUrl       string `protobuf:"bytes,3,opt,name=ip_url,json=ipUrl,proto3" json:"ip_url,omitempty"`
	NmUrl       string `protobuf:"bytes,4,opt,name=nm_url,json=nmUrl,proto3" json:"nm_url,omitempty"`
	MacUrl      string `protobuf:"bytes,5,opt,name=mac_url,json=macUrl,proto3" json:"mac_url,omitempty"`
	SubnetUrl   string `protobuf:"bytes,6,opt,name=subnet_url,json=subnetUrl,proto3" json:"subnet_url,omitempty"`
	TftpDir     string `protobuf:"bytes,7,opt,name=tftp_dir,json=tftpDir,proto3" json:"tftp_dir,omitempty"`
	ArpDeadline string `protobuf:"bytes,8,opt,name=arp_deadline,json=arpDeadline,proto3" json:"arp_deadline,omitempty"`
	DhcpRetry   uint32 `protobuf:"varint,9,opt,name=dhcp_retry,json=dhcpRetry,proto3" json:"dhcp_retry,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipxe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_pipxe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_pipxe_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetSrvIfaceUrl() string {
	if x != nil {
		return x.SrvIfaceUrl
	}
	return ""
}

func (x *Config) GetSrvIpUrl() string {
	if x != nil {
		return x.SrvIpUrl
	}
	return ""
}

func (x *Config) GetIpUrl() string {
	if x != nil {
		return x.IpUrl
	}
	return ""
}

func (x *Config) GetNmUrl() string {
	if x != nil {
		return x.NmUrl
	}
	return ""
}

func (x *Config) GetMacUrl() string {
	if x != nil {
		return x.MacUrl
	}
	return ""
}

func (x *Config) GetSubnetUrl() string {
	if x != nil {
		return x.SubnetUrl
	}
	return ""
}

func (x *Config) GetTftpDir() string {
	if x != nil {
		return x.TftpDir
	}
	return ""
}

func (x *Config) GetArpDeadline() string {
	if x != nil {
		return x.ArpDeadline
	}
	return ""
}

func (x *Config) GetDhcpRetry() uint32 {
	if x != nil {
		return x.DhcpRetry
	}
	return 0
}

var File_pipxe_proto protoreflect.FileDescriptor

var file_pipxe_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x69, 0x70, 0x78, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x50,
	0x69, 0x50, 0x58, 0x45, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x72, 0x76, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x76, 0x49, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x76, 0x5f, 0x69, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x72, 0x76, 0x49, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6d, 0x55, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x66, 0x74, 0x70, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x66, 0x74, 0x70, 0x44,
	0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x70, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x69, 0x70, 0x78, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipxe_proto_rawDescOnce sync.Once
	file_pipxe_proto_rawDescData = file_pipxe_proto_rawDesc
)

func file_pipxe_proto_rawDescGZIP() []byte {
	file_pipxe_proto_rawDescOnce.Do(func() {
		file_pipxe_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipxe_proto_rawDescData)
	})
	return file_pipxe_proto_rawDescData
}

var file_pipxe_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pipxe_proto_goTypes = []interface{}{
	(*Config)(nil), // 0: PiPXE.Config
}
var file_pipxe_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pipxe_proto_init() }
func file_pipxe_proto_init() {
	if File_pipxe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipxe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipxe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pipxe_proto_goTypes,
		DependencyIndexes: file_pipxe_proto_depIdxs,
		MessageInfos:      file_pipxe_proto_msgTypes,
	}.Build()
	File_pipxe_proto = out.File
	file_pipxe_proto_rawDesc = nil
	file_pipxe_proto_goTypes = nil
	file_pipxe_proto_depIdxs = nil
}
