// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: powerapi-config.proto

package powerapi

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	Servers              map[string]*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PollingInterval      string             `protobuf:"bytes,2,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	NameUrl              string             `protobuf:"bytes,3,opt,name=name_url,json=nameUrl,proto3" json:"name_url,omitempty"`
	ServerUrl            string             `protobuf:"bytes,4,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	UriUrl               string             `protobuf:"bytes,5,opt,name=uri_url,json=uriUrl,proto3" json:"uri_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd214f30f4afb2cf, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetServers() map[string]*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Config) GetPollingInterval() string {
	if m != nil {
		return m.PollingInterval
	}
	return ""
}

func (m *Config) GetNameUrl() string {
	if m != nil {
		return m.NameUrl
	}
	return ""
}

func (m *Config) GetServerUrl() string {
	if m != nil {
		return m.ServerUrl
	}
	return ""
}

func (m *Config) GetUriUrl() string {
	if m != nil {
		return m.UriUrl
	}
	return ""
}

func (*Config) XXX_MessageName() string {
	return "PowerAPI.Config"
}

type Server struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Https                bool     `protobuf:"varint,3,opt,name=https,proto3" json:"https,omitempty"`
	ApiBase              string   `protobuf:"bytes,4,opt,name=api_base,json=apiBase,proto3" json:"api_base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd214f30f4afb2cf, []int{1}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return m.Size()
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Server) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Server) GetHttps() bool {
	if m != nil {
		return m.Https
	}
	return false
}

func (m *Server) GetApiBase() string {
	if m != nil {
		return m.ApiBase
	}
	return ""
}

func (*Server) XXX_MessageName() string {
	return "PowerAPI.Server"
}
func init() {
	proto.RegisterType((*Config)(nil), "PowerAPI.Config")
	golang_proto.RegisterType((*Config)(nil), "PowerAPI.Config")
	proto.RegisterMapType((map[string]*Server)(nil), "PowerAPI.Config.ServersEntry")
	golang_proto.RegisterMapType((map[string]*Server)(nil), "PowerAPI.Config.ServersEntry")
	proto.RegisterType((*Server)(nil), "PowerAPI.Server")
	golang_proto.RegisterType((*Server)(nil), "PowerAPI.Server")
}

func init() { proto.RegisterFile("powerapi-config.proto", fileDescriptor_bd214f30f4afb2cf) }
func init() { golang_proto.RegisterFile("powerapi-config.proto", fileDescriptor_bd214f30f4afb2cf) }

var fileDescriptor_bd214f30f4afb2cf = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xcd, 0x6a, 0xf2, 0x40,
	0x14, 0x65, 0xd4, 0x24, 0x7a, 0xfd, 0xe0, 0x93, 0xa1, 0x3f, 0xa9, 0x60, 0x10, 0x17, 0xc5, 0x2e,
	0x8c, 0x60, 0x17, 0x2d, 0xed, 0xaa, 0x96, 0x2e, 0x84, 0x2e, 0x24, 0xc5, 0x4d, 0x37, 0x32, 0x91,
	0x31, 0x0e, 0x8d, 0x99, 0x61, 0x92, 0x58, 0x7c, 0x88, 0xbe, 0x53, 0x97, 0x2e, 0xfb, 0x08, 0x45,
	0x5f, 0xa4, 0xe4, 0x4e, 0xa4, 0xdd, 0xdd, 0xf3, 0x33, 0x67, 0xee, 0xe1, 0xc2, 0xa9, 0x92, 0xef,
	0x5c, 0x33, 0x25, 0x06, 0x0b, 0x99, 0x2c, 0x45, 0xe4, 0x2b, 0x2d, 0x33, 0x49, 0xeb, 0xd3, 0x82,
	0x7e, 0x98, 0x4e, 0xda, 0x83, 0x48, 0x64, 0xab, 0x3c, 0xf4, 0x17, 0x72, 0x3d, 0x8c, 0x64, 0x24,
	0x87, 0x68, 0x08, 0xf3, 0x25, 0x22, 0x04, 0x38, 0x99, 0x87, 0xbd, 0x8f, 0x0a, 0xd8, 0x8f, 0x98,
	0x44, 0x6f, 0xc0, 0x49, 0xb9, 0xde, 0x70, 0x9d, 0xba, 0xa4, 0x5b, 0xed, 0x37, 0x47, 0x1d, 0xff,
	0x98, 0xea, 0x1b, 0x8b, 0xff, 0x62, 0xf4, 0xa7, 0x24, 0xd3, 0xdb, 0xe0, 0xe8, 0xa6, 0x57, 0xd0,
	0x52, 0x32, 0x8e, 0x45, 0x12, 0xcd, 0x45, 0x92, 0x71, 0xbd, 0x61, 0xb1, 0x5b, 0xe9, 0x92, 0x7e,
	0x23, 0xf8, 0x5f, 0xf2, 0x93, 0x92, 0xa6, 0x17, 0x50, 0x4f, 0xd8, 0x9a, 0xcf, 0x73, 0x1d, 0xbb,
	0x55, 0xb4, 0x38, 0x05, 0x9e, 0xe9, 0x98, 0x76, 0x00, 0x4c, 0x20, 0x8a, 0x35, 0x14, 0x1b, 0x86,
	0x29, 0xe4, 0x73, 0x70, 0x72, 0x2d, 0x50, 0xb3, 0x50, 0xb3, 0x73, 0x2d, 0x66, 0x3a, 0x6e, 0x3f,
	0xc3, 0xbf, 0xbf, 0x6b, 0xd1, 0x16, 0x54, 0xdf, 0xf8, 0xd6, 0x25, 0x68, 0x2a, 0x46, 0x7a, 0x09,
	0xd6, 0x86, 0xc5, 0x39, 0xc7, 0xa5, 0x9a, 0xa3, 0xd6, 0x6f, 0x2d, 0xf3, 0x30, 0x30, 0xf2, 0x5d,
	0xe5, 0x96, 0xf4, 0x38, 0xd8, 0x86, 0xa4, 0x67, 0x60, 0x9b, 0xdf, 0xcb, 0xa8, 0x12, 0x51, 0x0a,
	0x35, 0x25, 0x75, 0x86, 0x61, 0x56, 0x80, 0x33, 0x3d, 0x01, 0x6b, 0x95, 0x65, 0x2a, 0xc5, 0x4e,
	0xf5, 0xc0, 0x80, 0xa2, 0x2c, 0x53, 0x62, 0x1e, 0xb2, 0x94, 0x97, 0x7d, 0x1c, 0xa6, 0xc4, 0x98,
	0xa5, 0x7c, 0xdc, 0xdd, 0xed, 0x3d, 0xf2, 0xb5, 0xf7, 0xc8, 0xf7, 0xde, 0x23, 0x9f, 0x07, 0x8f,
	0xec, 0x0e, 0x1e, 0x79, 0x05, 0xff, 0xfe, 0x78, 0xde, 0xd0, 0xc6, 0xfb, 0x5c, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xb8, 0x08, 0xcd, 0x23, 0xf1, 0x01, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UriUrl) > 0 {
		i -= len(m.UriUrl)
		copy(dAtA[i:], m.UriUrl)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.UriUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerUrl) > 0 {
		i -= len(m.ServerUrl)
		copy(dAtA[i:], m.ServerUrl)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.ServerUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NameUrl) > 0 {
		i -= len(m.NameUrl)
		copy(dAtA[i:], m.NameUrl)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.NameUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PollingInterval) > 0 {
		i -= len(m.PollingInterval)
		copy(dAtA[i:], m.PollingInterval)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.PollingInterval)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Servers) > 0 {
		for k := range m.Servers {
			v := m.Servers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPowerapiConfig(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPowerapiConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Server) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiBase) > 0 {
		i -= len(m.ApiBase)
		copy(dAtA[i:], m.ApiBase)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.ApiBase)))
		i--
		dAtA[i] = 0x22
	}
	if m.Https {
		i--
		if m.Https {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Server) > 0 {
		i -= len(m.Server)
		copy(dAtA[i:], m.Server)
		i = encodeVarintPowerapiConfig(dAtA, i, uint64(len(m.Server)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPowerapiConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovPowerapiConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for k, v := range m.Servers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPowerapiConfig(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPowerapiConfig(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPowerapiConfig(uint64(mapEntrySize))
		}
	}
	l = len(m.PollingInterval)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	l = len(m.NameUrl)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	l = len(m.ServerUrl)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	l = len(m.UriUrl)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovPowerapiConfig(uint64(m.Port))
	}
	if m.Https {
		n += 2
	}
	l = len(m.ApiBase)
	if l > 0 {
		n += 1 + l + sovPowerapiConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPowerapiConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPowerapiConfig(x uint64) (n int) {
	return sovPowerapiConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerapiConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servers == nil {
				m.Servers = make(map[string]*Server)
			}
			var mapkey string
			var mapvalue *Server
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPowerapiConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPowerapiConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPowerapiConfig
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPowerapiConfig
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPowerapiConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPowerapiConfig
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPowerapiConfig
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Server{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPowerapiConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPowerapiConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Servers[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerapiConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerapiConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Https = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerapiConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerapiConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPowerapiConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPowerapiConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerapiConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPowerapiConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPowerapiConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPowerapiConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPowerapiConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPowerapiConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPowerapiConfig = fmt.Errorf("proto: unexpected end of group")
)
