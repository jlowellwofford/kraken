// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pxemodule.proto

package pxe

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	SrvIfaceUrl          string   `protobuf:"bytes,1,opt,name=srv_iface_url,json=srvIfaceUrl,proto3" json:"srv_iface_url,omitempty"`
	SrvIpUrl             string   `protobuf:"bytes,2,opt,name=srv_ip_url,json=srvIpUrl,proto3" json:"srv_ip_url,omitempty"`
	IpUrl                string   `protobuf:"bytes,3,opt,name=ip_url,json=ipUrl,proto3" json:"ip_url,omitempty"`
	NmUrl                string   `protobuf:"bytes,4,opt,name=nm_url,json=nmUrl,proto3" json:"nm_url,omitempty"`
	MacUrl               string   `protobuf:"bytes,5,opt,name=mac_url,json=macUrl,proto3" json:"mac_url,omitempty"`
	SubnetUrl            string   `protobuf:"bytes,6,opt,name=subnet_url,json=subnetUrl,proto3" json:"subnet_url,omitempty"`
	TftpDir              string   `protobuf:"bytes,7,opt,name=tftp_dir,json=tftpDir,proto3" json:"tftp_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfe76d7f2ebcdfb, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetSrvIfaceUrl() string {
	if m != nil {
		return m.SrvIfaceUrl
	}
	return ""
}

func (m *Config) GetSrvIpUrl() string {
	if m != nil {
		return m.SrvIpUrl
	}
	return ""
}

func (m *Config) GetIpUrl() string {
	if m != nil {
		return m.IpUrl
	}
	return ""
}

func (m *Config) GetNmUrl() string {
	if m != nil {
		return m.NmUrl
	}
	return ""
}

func (m *Config) GetMacUrl() string {
	if m != nil {
		return m.MacUrl
	}
	return ""
}

func (m *Config) GetSubnetUrl() string {
	if m != nil {
		return m.SubnetUrl
	}
	return ""
}

func (m *Config) GetTftpDir() string {
	if m != nil {
		return m.TftpDir
	}
	return ""
}

func (*Config) XXX_MessageName() string {
	return "PXEModule.Config"
}
func init() {
	proto.RegisterType((*Config)(nil), "PXEModule.Config")
	golang_proto.RegisterType((*Config)(nil), "PXEModule.Config")
}

func init() { proto.RegisterFile("pxemodule.proto", fileDescriptor_9cfe76d7f2ebcdfb) }
func init() { golang_proto.RegisterFile("pxemodule.proto", fileDescriptor_9cfe76d7f2ebcdfb) }

var fileDescriptor_9cfe76d7f2ebcdfb = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x46, 0xb9, 0x6a, 0xd3, 0xe9, 0x15, 0x11, 0x0a, 0xe2, 0xf8, 0x17, 0x64, 0x56, 0x6e, 0xec,
	0x2c, 0x5c, 0xba, 0xf3, 0x67, 0xe1, 0x42, 0x10, 0x41, 0x10, 0x37, 0xa5, 0xed, 0xa4, 0x35, 0xd0,
	0x34, 0x21, 0x4d, 0x86, 0x79, 0x3c, 0x97, 0x03, 0x6e, 0x7c, 0x04, 0xe9, 0xbc, 0x88, 0xe4, 0xd6,
	0xd9, 0xe5, 0x3b, 0xe7, 0x64, 0x71, 0xf1, 0xd0, 0xac, 0x84, 0xd2, 0x0b, 0xdf, 0x8a, 0xcc, 0x58,
	0xed, 0x74, 0x9a, 0xbc, 0xbc, 0x3f, 0x3e, 0x13, 0x38, 0xbd, 0x6e, 0xa4, 0xfb, 0xf4, 0x65, 0x56,
	0x69, 0x35, 0x6f, 0x74, 0xa3, 0xe7, 0x54, 0x94, 0xbe, 0xa6, 0x45, 0x83, 0x5e, 0xe3, 0xcf, 0xd9,
	0x37, 0x20, 0xbb, 0xd7, 0x5d, 0x2d, 0x9b, 0x74, 0x86, 0x07, 0xbd, 0x5d, 0xe6, 0xb2, 0x2e, 0x2a,
	0x91, 0x7b, 0xdb, 0x4e, 0xe1, 0x12, 0xae, 0x92, 0xd7, 0xfd, 0xde, 0x2e, 0x9f, 0x02, 0x7b, 0xb3,
	0x6d, 0x7a, 0x8e, 0x48, 0x8d, 0xa1, 0x60, 0x87, 0x82, 0x49, 0x08, 0x4c, 0xb0, 0x47, 0xc8, 0xfe,
	0xcd, 0x2e, 0x99, 0x48, 0x6e, 0x71, 0xa7, 0x08, 0xef, 0x8d, 0xb8, 0x53, 0x01, 0x1f, 0x63, 0xac,
	0x8a, 0x8a, 0x78, 0x44, 0x9c, 0xa9, 0xa2, 0x0a, 0xe2, 0x02, 0xb1, 0xf7, 0x65, 0x27, 0x1c, 0x39,
	0x46, 0x2e, 0x19, 0x49, 0xd0, 0x27, 0x38, 0x71, 0xb5, 0x33, 0xf9, 0x42, 0xda, 0x69, 0x4c, 0x32,
	0x0e, 0xfb, 0x41, 0xda, 0xbb, 0xb3, 0xf5, 0xc0, 0xe1, 0x67, 0xe0, 0xf0, 0x3b, 0x70, 0xf8, 0xda,
	0x70, 0x58, 0x6f, 0x38, 0x7c, 0x44, 0xd9, 0xad, 0x59, 0x89, 0x92, 0xd1, 0xc5, 0x37, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd6, 0xdd, 0x31, 0xde, 0x3e, 0x01, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TftpDir) > 0 {
		i -= len(m.TftpDir)
		copy(dAtA[i:], m.TftpDir)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.TftpDir)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubnetUrl) > 0 {
		i -= len(m.SubnetUrl)
		copy(dAtA[i:], m.SubnetUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.SubnetUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MacUrl) > 0 {
		i -= len(m.MacUrl)
		copy(dAtA[i:], m.MacUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.MacUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NmUrl) > 0 {
		i -= len(m.NmUrl)
		copy(dAtA[i:], m.NmUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.NmUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpUrl) > 0 {
		i -= len(m.IpUrl)
		copy(dAtA[i:], m.IpUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.IpUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrvIpUrl) > 0 {
		i -= len(m.SrvIpUrl)
		copy(dAtA[i:], m.SrvIpUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.SrvIpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrvIfaceUrl) > 0 {
		i -= len(m.SrvIfaceUrl)
		copy(dAtA[i:], m.SrvIfaceUrl)
		i = encodeVarintPxemodule(dAtA, i, uint64(len(m.SrvIfaceUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPxemodule(dAtA []byte, offset int, v uint64) int {
	offset -= sovPxemodule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrvIfaceUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.SrvIpUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.IpUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.NmUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.MacUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.SubnetUrl)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	l = len(m.TftpDir)
	if l > 0 {
		n += 1 + l + sovPxemodule(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPxemodule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPxemodule(x uint64) (n int) {
	return sovPxemodule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxemodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrvIfaceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrvIfaceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrvIpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrvIpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NmUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NmUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TftpDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxemodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxemodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TftpDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxemodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPxemodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPxemodule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPxemodule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPxemodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPxemodule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPxemodule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPxemodule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPxemodule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPxemodule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPxemodule = fmt.Errorf("proto: unexpected end of group")
)
