// rfthermaldiscovery.proto: describes the rfdiscovery object
//
// Author: Ghazanfar Ali <ghazanfar.ali@ttu.edu>,Kevin Pelzel <kevinpelzel22@gmail.com>; J. Lowell Wofford <lowell@lanl.gov>
//
// This software is open source software available under the BSD-3 license.
// Copyright (c) 2018, Triad National Security, LLC
// See LICENSE file for details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: rfthermaldiscovery.proto

package rfthermaldiscovery

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers             map[string]*Server     `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IpUrl               string                 `protobuf:"bytes,2,opt,name=ip_url,json=ipUrl,proto3" json:"ip_url,omitempty"`
	AggUrl              string                 `protobuf:"bytes,3,opt,name=agg_url,json=aggUrl,proto3" json:"agg_url,omitempty"`
	PollingInterval     string                 `protobuf:"bytes,4,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	RfThermalThresholds map[string]*Thresholds `protobuf:"bytes,5,rep,name=rf_thermal_thresholds,json=rfThermalThresholds,proto3" json:"rf_thermal_thresholds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfthermaldiscovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_rfthermaldiscovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_rfthermaldiscovery_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetServers() map[string]*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Config) GetIpUrl() string {
	if x != nil {
		return x.IpUrl
	}
	return ""
}

func (x *Config) GetAggUrl() string {
	if x != nil {
		return x.AggUrl
	}
	return ""
}

func (x *Config) GetPollingInterval() string {
	if x != nil {
		return x.PollingInterval
	}
	return ""
}

func (x *Config) GetRfThermalThresholds() map[string]*Thresholds {
	if x != nil {
		return x.RfThermalThresholds
	}
	return nil
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip         string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	ReqTimeout int32  `protobuf:"varint,4,opt,name=req_timeout,json=reqTimeout,proto3" json:"req_timeout,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfthermaldiscovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_rfthermaldiscovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_rfthermaldiscovery_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Server) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Server) GetReqTimeout() int32 {
	if x != nil {
		return x.ReqTimeout
	}
	return 0
}

type Thresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerNormal   int32 `protobuf:"varint,1,opt,name=lower_normal,json=lowerNormal,proto3" json:"lower_normal,omitempty"`
	UpperNormal   int32 `protobuf:"varint,2,opt,name=upper_normal,json=upperNormal,proto3" json:"upper_normal,omitempty"`
	LowerHigh     int32 `protobuf:"varint,3,opt,name=lower_high,json=lowerHigh,proto3" json:"lower_high,omitempty"`
	UpperHigh     int32 `protobuf:"varint,4,opt,name=upper_high,json=upperHigh,proto3" json:"upper_high,omitempty"`
	LowerCritical int32 `protobuf:"varint,5,opt,name=lower_critical,json=lowerCritical,proto3" json:"lower_critical,omitempty"`
	UpperCritical int32 `protobuf:"varint,6,opt,name=upper_critical,json=upperCritical,proto3" json:"upper_critical,omitempty"`
}

func (x *Thresholds) Reset() {
	*x = Thresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rfthermaldiscovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thresholds) ProtoMessage() {}

func (x *Thresholds) ProtoReflect() protoreflect.Message {
	mi := &file_rfthermaldiscovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thresholds.ProtoReflect.Descriptor instead.
func (*Thresholds) Descriptor() ([]byte, []int) {
	return file_rfthermaldiscovery_proto_rawDescGZIP(), []int{2}
}

func (x *Thresholds) GetLowerNormal() int32 {
	if x != nil {
		return x.LowerNormal
	}
	return 0
}

func (x *Thresholds) GetUpperNormal() int32 {
	if x != nil {
		return x.UpperNormal
	}
	return 0
}

func (x *Thresholds) GetLowerHigh() int32 {
	if x != nil {
		return x.LowerHigh
	}
	return 0
}

func (x *Thresholds) GetUpperHigh() int32 {
	if x != nil {
		return x.UpperHigh
	}
	return 0
}

func (x *Thresholds) GetLowerCritical() int32 {
	if x != nil {
		return x.LowerCritical
	}
	return 0
}

func (x *Thresholds) GetUpperCritical() int32 {
	if x != nil {
		return x.UpperCritical
	}
	return 0
}

var File_rfthermaldiscovery_proto protoreflect.FileDescriptor

var file_rfthermaldiscovery_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x66, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x52, 0x46, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0xcf,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x46, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x15, 0x72, 0x66, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x52, 0x46, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x66, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x72, 0x66, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x1a, 0x56, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x46, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x18, 0x52, 0x66, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x46, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x61, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x3b, 0x72, 0x66, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rfthermaldiscovery_proto_rawDescOnce sync.Once
	file_rfthermaldiscovery_proto_rawDescData = file_rfthermaldiscovery_proto_rawDesc
)

func file_rfthermaldiscovery_proto_rawDescGZIP() []byte {
	file_rfthermaldiscovery_proto_rawDescOnce.Do(func() {
		file_rfthermaldiscovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_rfthermaldiscovery_proto_rawDescData)
	})
	return file_rfthermaldiscovery_proto_rawDescData
}

var file_rfthermaldiscovery_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rfthermaldiscovery_proto_goTypes = []interface{}{
	(*Config)(nil),     // 0: RFThermalDiscovery.Config
	(*Server)(nil),     // 1: RFThermalDiscovery.Server
	(*Thresholds)(nil), // 2: RFThermalDiscovery.Thresholds
	nil,                // 3: RFThermalDiscovery.Config.ServersEntry
	nil,                // 4: RFThermalDiscovery.Config.RfThermalThresholdsEntry
}
var file_rfthermaldiscovery_proto_depIdxs = []int32{
	3, // 0: RFThermalDiscovery.Config.servers:type_name -> RFThermalDiscovery.Config.ServersEntry
	4, // 1: RFThermalDiscovery.Config.rf_thermal_thresholds:type_name -> RFThermalDiscovery.Config.RfThermalThresholdsEntry
	1, // 2: RFThermalDiscovery.Config.ServersEntry.value:type_name -> RFThermalDiscovery.Server
	2, // 3: RFThermalDiscovery.Config.RfThermalThresholdsEntry.value:type_name -> RFThermalDiscovery.Thresholds
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_rfthermaldiscovery_proto_init() }
func file_rfthermaldiscovery_proto_init() {
	if File_rfthermaldiscovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rfthermaldiscovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfthermaldiscovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rfthermaldiscovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rfthermaldiscovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rfthermaldiscovery_proto_goTypes,
		DependencyIndexes: file_rfthermaldiscovery_proto_depIdxs,
		MessageInfos:      file_rfthermaldiscovery_proto_msgTypes,
	}.Build()
	File_rfthermaldiscovery_proto = out.File
	file_rfthermaldiscovery_proto_rawDesc = nil
	file_rfthermaldiscovery_proto_goTypes = nil
	file_rfthermaldiscovery_proto_depIdxs = nil
}
